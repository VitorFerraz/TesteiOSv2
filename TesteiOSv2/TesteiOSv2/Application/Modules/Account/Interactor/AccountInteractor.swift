//
//  AccountInteractor.swift
//  TesteiOSv2
//
//  Created by Vitor Ferraz Varela on 24/07/19.
//  Copyright Â© 2019 Vitor Ferraz Varela. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AccountBusinessLogic {
    func showAccountDetails(response: UserAccountResponse)
    func fetchStatements()
}

protocol AccountDataStore {
    var userAccount: UserAccount? { get set }
    var displayedStatements: [StatementViewModel]? { get set }
}

final class AccountInteractor: AccountBusinessLogic, AccountDataStore {
    var presenter: AccountPresentationLogic?
    lazy var worker: AccountWorker? = AccountWorker()
    var userAccount: UserAccount?
    var displayedStatements: [StatementViewModel]? = []
    
    func showAccountDetails(response: UserAccountResponse) {
        presenter?.presentAccountDetails(response: response)

    }
    
    func fetchStatements() {
        worker?.fetchStatements { [weak self] response in
            switch response {
            case .failure(let error):
                self?.presenter?.presentError(error: error)
            case .success(let responseStatements):
                self?.presenter?.presentStatements(response: responseStatements)
            }
        }
    }
}
