//
//  LoginWorker.swift
//  TesteiOSv2
//
//  Created by Vitor Ferraz Varela on 21/07/19.
//  Copyright Â© 2019 Vitor Ferraz Varela. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import KeychainSwift

final class LoginWorker {
    let repository: LoginRepository
    init(repository: LoginRepository = LoginRemoteRepository()) {
        self.repository = repository
    }
    
    func validateCredentials(user: String?, password: String?) throws {
        guard let user = user, !user.isEmpty else { throw LoginError.emptyUser }
        guard let password = password, !password.isEmpty else { throw LoginError.emptyPassword }
        
        guard Validator.validateEmail(email: user).isValid || Validator.validateDocumentNumber(documentNumber: user).isValid else {
            throw LoginError.invalidUser
        }
        
        guard Validator.validatePassword(password: password).isValid else { throw LoginError.invalidPassword }
    }
    
    func submitLogin(request: Login, completion: @escaping (Result<UserAccountResponse, Error>) -> Void) {
        repository.submitLogin(loginRequest: request) { (result) in
            switch result {
            case .failure(let error):
                return completion(.failure(error))
            case .success(let response):
                return completion(.success(response))
            }
        }
    }
    
    func persistCredentials(fields: Login) {
        guard let data = try? JSONEncoder().encode(fields) else { return }
        KeychainSwift().set(data, forKey: "bank")
    }
    
    func getPersistedCredentials() -> Login? {
        guard let data = KeychainSwift().getData("bank") else { return nil }
        guard let fields = try? JSONDecoder().decode(Login.self, from: data) else { return nil }
        return fields
    }
}
