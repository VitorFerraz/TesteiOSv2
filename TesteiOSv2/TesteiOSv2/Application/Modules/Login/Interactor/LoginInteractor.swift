//
//  LoginInteractor.swift
//  TesteiOSv2
//
//  Created by Vitor Ferraz Varela on 21/07/19.
//  Copyright Â© 2019 Vitor Ferraz Varela. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
import UIKit

protocol LoginBusinessLogic {
    func getPersistedCredentials()
    func submitLogin(request: Login)
}

protocol LoginDataStore {
    var userAccount: UserAccount? { get set }
}

final class LoginInteractor: LoginBusinessLogic, LoginDataStore {
    lazy var worker: LoginWorker? = LoginWorker()
    var presenter: LoginPresentationLogic?
    var userAccount: UserAccount?

    func getPersistedCredentials() {
        let credentials = worker?.getPersistedCredentials()
        let fields = Login(user: credentials?.user, password: credentials?.password)
        presenter?.presentPersistedCredentials(response: fields)
    }
    
    func submitLogin(request: Login) {
        do {
            try worker?.validateCredentials(user: request.user ?? "", password: request.password ?? "")
            
            worker?.submitLogin(request: request) { result in
                switch result {
                case .failure(let error):
                    self.presenter?.presentError(error: error)
                case .success(let response):
                    self.userAccount = response.userAccount
                    self.presenter?.presentUserAccount(response: response)
                }
            }
        } catch {
            presenter?.presentError(error: error)
        }
    }
}

